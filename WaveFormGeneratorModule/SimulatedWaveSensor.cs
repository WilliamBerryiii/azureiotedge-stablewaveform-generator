using System;

namespace AzureIotEdgeSimulatedWaveSensor
{
    public class WaveSensor {

        // begin customizable data parameters
        private double frequency {get; set;}  //measured in Hz
        private double period { get; set;}
        private double amplitude {get; set;} //units unspecified
        private double verticalShift {get; set;}
        private double readDelta {get; set;} // time between successive values in read

        // specifies which wave form is produced on read
        // 1 - Sine
        // 2 - Square
        private int waveType;

        public WaveSensor(double freq, double amp, double vert, double delta, int type){
            this.frequency = freq;
            this.period = 1 / frequency;
            this.amplitude = amp;
            this.verticalShift = vert;
            this.readDelta = delta;
            this.waveType = type;
        }


        //sine function translated as per the paramters specified in the instatiation of the object
        private void sine(double[] a) {
            double b = (2 * Math.PI) / (1 / frequency);
            for (int i = 0; i < a.Length; i++){
                a[i] = amplitude*Math.Sin(b*a[i]) + verticalShift;
            }
        }

        //implemented as a signed sine
        private void square(double[] a) {
            double b = (2 * Math.PI) / (1 / frequency);
            for (int i = 0; i < a.Length; i++){
                a[i] = amplitude*Math.Sign(Math.Sin(b*a[i])) + verticalShift;
            }
        }


        // returns an array of 1000 doubles generated by the strategy
        public double[] read(){

            // fill array of read times
            double[] retval = new double[100];
            for (int i = 0; i < 100; i++){ 
                retval[i] = i * readDelta;
            }

            // map wave transformations onto array of read times
            switch (waveType)
            {
                case 1:
                    sine(retval); break;
                case 2: 
                    square(retval); break;
                default: break;
            }
            return retval;
        }
    }
}